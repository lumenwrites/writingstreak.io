generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(cuid()) // cuid and uuid are the same, but cuid is shorter
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  trusted Boolean @default(false) // So that I could manually approve users if I want

  username      String @unique
  email         String @unique
  password      String

  // Stripe
  subscriptionStatus      SubscriptionStatus @default(FREE)
  subscriptionExpires     DateTime @default(dbgenerated("NOW() + interval '1 month'"))
  stripeCustomerId        String? @unique // unique so that webhooks could find user by stripe customer id
  stripeSubscriptionId    String?  //@default("")

  // Profile Settings
  bio                 String? @default("")
  website             String? @default("")
  twitter             String? @default("")
  // Writing Settings
  writingDays         String[] // @default(["Mon", "Tue", "Wed", "Thu", "Fri"])
  targetWordcount     Int @default(250)
  sprintPace          String @default("Medium")
  sprintDuration      Int @default(20)
  blurredMode         Boolean  @default(false)
  typewriterMode      Boolean  @default(false)
  startDate           DateTime  @default(now())
  endDate             DateTime @default(dbgenerated("NOW() + interval '1 month'"))
  writingGoal         Int @default(5000)

  posts Post[] @relation("UserPosts")
  days Day[] @relation("UserDays")
  upvotedPosts Post[] @relation("UserUpvotedPosts")
  downvotedPosts Post[] @relation("UserDownvotedPosts")


  comments Comment[] @relation("UserComments")
  upvotedComments Comment[] @relation("UserUpvotedComments")
  downvotedComments Comment[] @relation("UserDownvotedComments")

  // karma
  // following
  // followers
}

enum SubscriptionStatus {
  FREE
  LIFETIME_FREE
  STANDARD
  // PREMIUM
}

model Post {
  id String @id @default(cuid())
  slug String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  
  canonicalUrl String?
  socialTitle String?
  socialDescription String?

  title String
  body String
  description String

  author User @relation("UserPosts", fields: [authorId], references: [id])
  authorId String // In the field authorId we will store [id] of the User
  sequence Sequence? @relation("SequencePosts", fields: [sequenceId], references: [id])
  sequenceId String?
  tags Tag[]
  // socialImage SocialImage? @relation("PostSocialImage")
  socialImage String?
  
  comments Comment[] @relation("PostComments")

  rank Float @default(0)
  score Int @default(0) // to sort posts by score I could just count upvoters, but prisma doesn't support that yet, so I keep track of it manually
  views Int @default(0)
  upvoters User[] @relation("UserUpvotedPosts")
  downvoters User[] @relation("UserDownvotedPosts")

  // Thumbnail
  // Social image
}

model Comment {
  id String @id @default(cuid())
  body String

  // Author. One user, many comments.
  //https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-many-relations
  author User @relation("UserComments", fields: [authorId], references: [id])
  authorId String // In the field authorId we will store [id] of the User
  
  // Commented under this post
  post Post @relation("PostComments", fields: [postId], references: [id])
  postId String

  // Upvoters and downvoters. Many to many.
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations
  upvoters User[] @relation("UserUpvotedComments")
  downvoters User[] @relation("UserDownvotedComments")

  // Parent comment.
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#one-to-many-self-relations
  // https://stackoverflow.com/questions/68841406/prisma-model-self-referencing-one-to-many
  parentId String?
  parent Comment? @relation("ParentChildren", fields: [parentId], references: [id])
  children Comment[] @relation("ParentChildren")

  approved Boolean  @default(true) // do I need that now?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



// Many to many relations:
// https://www.prisma.io/docs/support/help-articles/working-with-many-to-many-relations
model Tag {
  id String @id @default(cuid())
  posts Post[]
  name String
  slug String @unique
}

model Sequence {
  id String @id @default(cuid())
  posts Post[] @relation("SequencePosts")
  name String
  slug String @unique
}

model Day {
  id String @id @default(cuid())
  date String // DateTime @default(now())
  targetWordCount Int @default(250)
  wordCount Int @default(0)
  writingTime Int @default(0)
  // Edited posts? Changes?

  author User @relation("UserDays", fields: [authorId], references: [id])
  authorId String // In the field authorId we will store [id] of the User

  @@unique([authorId, date])
  // Edited posts, created posts, diffs somehow?
  // comments Comment[] @relation("PostComments")
}


// model SocialImage {
//   id String @id @default(cuid())
//   post Post @relation("PostSocialImage", fields: [postId], references: [id])
//   postId String
//   name String
//   url String
// }
